// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now()) @map("created_at")
  feedback  Feedback[]

  @@map("users")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdBy   String    @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  personas    Persona[]
  datasets    Dataset[]

  @@map("projects")
}

model Persona {
  id          String       @id @default(uuid())
  name        String
  description String?
  traits      String       @default("{}")
  embeddingId String?      @map("embedding_id")
  projectId   String       @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  annotations Annotation[]

  @@map("personas")
}

model Dataset {
  id          String  @id @default(uuid())
  name        String
  description String?
  projectId   String  @map("project_id")
  project     Project @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  items       Item[]

  @@map("datasets")
}

model Item {
  id          String       @id @default(uuid())
  content     String
  metadata    String       @default("{}")
  datasetId   String       @map("dataset_id")
  dataset     Dataset      @relation(fields: [datasetId], references: [id])
  createdAt   DateTime     @default(now()) @map("created_at")
  annotations Annotation[]

  @@map("items")
}

model Annotation {
  id         String     @id @default(uuid())
  itemId     String     @map("item_id")
  item       Item       @relation(fields: [itemId], references: [id])
  personaId  String     @map("persona_id")
  persona    Persona    @relation(fields: [personaId], references: [id])
  annotation String
  confidence Float?
  createdAt  DateTime   @default(now()) @map("created_at")
  feedback   Feedback[]

  @@map("annotations")
}

model Feedback {
  id           String     @id @default(uuid())
  annotationId String     @map("annotation_id")
  annotation   Annotation @relation(fields: [annotationId], references: [id])
  userId       String     @map("user_id")
  user         User       @relation(fields: [userId], references: [id])
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now()) @map("created_at")

  @@map("feedback")
}
